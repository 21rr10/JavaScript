Rules
    -> Variables names are case sensitive;
    -> Only letters,digits.underscore and $ is allowed.
    -> Space isn't allowed
    -> Only a letter, underscore or & should be the first character
    -> Reserved words cannot be Variable names.

Reserved words have a special meaning a javascript and as such cannot be used a Variable names.

var: not used now days.
here caribles and can be redeclared.
let : Variable cannot be re-declared but can be updated.

Data Types
    PRIMITIVE DATA TYPES
        Number
        String
        Boolean
        Undefined
        Null 
        BigInt used to sotre numbers
        Symbol
    NON PRIMITIVE DATA TYPES
        objects : typeof null is objects


comments in JS
// single line comments
/* multiline
comments */


OPERATORS
it is used to perform some operation of Data
Expression : a+b;
 where a and b are operands and '+' is an operator.

    Arithmetic OPERATORS
        +,-,*,/,%
        Modulus-- %
        Eponentiation-- **
        Increment
            Post increment: a++,b++
            Pre increment:  ++a, ++b
        Decrement
            Post decrement: a--,b--
            Pre decrement:  --a, --b
    
    Assignment OPERATORS
        =, +=, -=, *=, %=, **=
    
    Comparison OPERATORS
        Equal to (==)
        Equal to and type (===)
        not equal to(!=)
        not euqal to and type(!==)
        >
        <
        >=
        <=
    Logical OPERATORS
        && logical and
        || logical or
        !  logical NOT

CONDITIONAL STATEMENTS

    *** if statement
        if(){

        }
    ex:
    let color;
    if(mode==="dark-mode"){
        color="black";
    }

    *** if else STATEMENTS
        if(){

        }else{

        }
    ex:
    let mode ="blue"; 
    let color;
     if(mode=="dark"){
        color="black";
     } 
     else{
        color="white";
     } 
    

    *** else-if STATEMENTS
    if(){

    }else if(){

    }else{

    }


    ex:
    if(age<18){
        console.log("Junior);
    }
    else if(age>60)|{
        console.log("senior");
    }
    else{
        console.log("middle aged");
    }

TERNARY OPERATORS

condition? true output: false output;
 age>18?"adult":"child";


LOOPS

Loops are used to excute a piece of code again and again
different types of loops are 
- for loop
- while loop
- do-while loop

-- for loop
    for(initialisation; condition; updation){

    }
-- while loop
    while(condition){

    }
-- do while loop
    do{

    }while(condition);
-- for-of loop
    for(let value of strVar){

    }
    we make a string variable(str); 
    all the characters of the string will be printed
    one by one. For-of loop has no need for initialisation
    updation or condition.
-- for-in loop
    for(let key in objVar){

    }
    suppose we create an object student
    let student={
        name:"rahul",
        age: 20,
        cgpa:8.3,
        isPass:true
    };
    for in loop will print the keys of the object student.
    here it will print name,age,cgpa,isPass
    To print the value of each key 
    console.log(student[key]);


STRINGS
Strings is a sequence of character used to represent text

    -- creation of a String
        let str="heloo there";
        or
        let str='heloooooo there';
    Strings have inbuilt properties and functions called methods
    for example:
    length : to calculate the length of anystring
    let str="hello";
    let len=str.length;

    string behaves like an object.
    to extract a character at a position we can
    str[pos];

    TEMPLATE LITERALS in JS
    Its a way to have embedded expressions in Strings
    `this is a template literal`
    Its usage is in
    let obj={
    item:"pen",
    price:10,
    };
    console.log("the cost of ",obj.item," is ",obj.price);
    //instead of printing in bits and pieces we can print in one\
    //string itself using template literals
    let output=`The cost of ${obj.item} is ${obj.price} `;
    console.log(output);

    This phenomenon is String Interpolation where
    `string text ${expression} string text`;
    we can perform operation inside ${}

    ESCAPE characters
    \n : it gives new line to the Strings
    \t: tab Space

STRINGS METHODS IN JS

These are built-in fucntions to manipulate string

-> str.toUpperCase();
-> str.toLowerCase();
-> str.trim();// it removes whitespaces from starting and end
 strings are immutable in JS unless using replace method;
 no change takes places in original string. new string needs to be created
->str.slice(start,end); returns substring of a string
->str.concat(str2); joins 2 strings
->str.replace(searchVal,newVal);// replace the first occurrence of search value
->str.replaceAll(searchVal,NewVal);
->str.charAt(pos);



        ARRAYS
        It is a collection of items of same type
        although we can store diff types

        creation of ARRAYS:
        let heroes=["thor","ironman"];
        let marks=[1,2,3,4,5,6];
        
        we can calculate the length of array using .length
        typeof of array is object. 
        It has a key:value pair where key is the index

        Array is mutable.

        Array methods
         let food=["potato","apple","lychee","tomato"];
            ->Push(): add at end
             food.push("chips");

            ->Pop(): delete from end and return;
             console.log(food.pop(),food);

            ->toString(): converts array to string and
             original array remains the same
             console.log(food.toString());

            ->concat(): joins multiple arrays and returns result
            let list=["jackfruit","guava"];
            let allFood=food.concat(list);

            ->unshift(): add to start
            allFood.unshift("Pineapple");

            ->shift(): delete from start and return
            console.log(allFood.shift(),"\n",allFood);

            ->slice(): return a piece of the array
                slice(startidx,endidx);
              console.log(allFood.slice(2,4));
            note: original arrray doesnt change
            ->splice(): change original array  
            suppose we want to delete elements from the 
            array, then provide the index to start the operation
            from and state the no. of elements to be deleted

            splice(startidx,delcount);
            to add.
            splice(startidx,delcount);



FUNCTIONS 
        Blocks of code used to perform a specific task and can be invoked whenever needed
        Function definiton:
        function functionName(){
            //code
        }

        function call: functionName();
        fucniton saves us from redundancy
        Functions contain parameter inside the ();
        function myFunction(msg){
           console.log(msg);
        }//msg is the parameter

        myFunction("Banana");// parameter inside the function call is called argument

        return keyword is added to the end of the function.
        -> No codes after return is executed
        -> Parameters act as the local variable inside the functions
        -> They have a block scope.

        ARROW FUNCTIONS 
        It is a compact way of writing a function

        syntax:
        const functionName=(parameter1,parameter2)=>{  }
        //to multiply two numbers using arrow functions
        const arrowMul=(a,b)=>{
            console.log(a*b);
        };
        arrowMul(5,3);
    
    Functions in javascript can be passed as a normal variable and can be returned
    ex:
    function abc(){
        console.log("hello");
    }
    fucntion myFunc(abc){
        return abc;
    }
    this is called a callback function.

    CallBack function:
    A fucntion passed as an argument to another function

    forEach loop in arrays:

    callbackfn(value: number, index: number, array: number[]): void

    arr.forEach(callBackFunction)
    here it is a function to execute for each element in the arryar

Higher Order Function/methods
forEach is a HOF(higher order function)
They are those functions that either take other functions as parameters or return other functions
Some more array methods
    map is similar to forEach.
    The difference is it returns a new array wiht the result of some operation

    arr.map(value,index,array);
    //to print all the values
        let arrar=[4,5,6];
        arrar.map((val)=>{
            console.log(val);
        });
        //to make new array
        let newarr=arrar.map((val)=>{
            return val**2;
        });

        console.log(newarr);
    

    filter method
    It creates a new array of elements that give true for a condition/filter
     let dsq=[1,2,3,4,5,6];
        console.log(dsq);
        let d_sq=dsq.filter((val)=>{
            return val%2==0;
        });
        console.log(d_sq);
    

    Reduce method
    It performs some opration and reduces the array to a single value and returns the esingle value
    let Val_A=[1,2,3,4,5,6,7];
    let res=Val_A.reduce((accemulator,current)=>{
        return accemulator+current
    });
    console.log(res);

DOM Document Object Manipulation

HTML: ITs the skeleton of the website
CSS: It does the styling of the website
JS: It gives the logical part 

HTML, CSS AND JS are written in three different files
because :
->It increaes the readability of the code
->it promotes of the modularity(divides into smaller parts)
->helps with browser caching

Window object :
The window object represents an open window in a browser.
It is a browser's object(not js's) and is automatically
created by the browser.
It is a global object with lots of properties and methods

DOM
it is a tree like structe made of nodes such as window 
When a browser is loaded, the browser creates a Document
Object Model (DOM) of the page
WINDOW->DOCUMENT->HTML-->HEAD->(META,TITLE,LINK)
                      |
                      |
                      |
                      |
                      -->BODY(DIV,SCRIPT)
                               |
                               ->DIV->(IMG,H1,P,DIV)
Whatever html code we write attached with javascript 
it is converted into an object inside js and can be accessed
inside js.the special object created is called Document
which is inside window object

console.log() is used to print
console.dir() is used to print the properties and methods 
of the special object (such as document)

DOM is used for dynamic manipulation inside a webpage

DOM Manipulation
-> Selecting withh index: document.getElementById("myId"); styling for id is done by using #. when an id element doesnt exist "null" is printed
-> Selecting with class: document.getElementByClassName("myclass");styling for class is done by using (.).It returns HTML collections.when a class element dooesnt exist , an empty HTML collect is returned.
->Selecting with tag: document.getElementByTageName("p");styling for tag is done by using tag name .It returns HTML collections.when a tag element dooesnt exist , an empty HTML collect is returned.
->Query selector: inside query selector we can pass id,class or tag
    document.querySelector("myId/myClass/tag");
    //returns first element
    document.querySelectorAll("myId/myClass/tag");
    //returns a Nodelist


properties

-> tagName : returns atg for element nodes.
-> innerText: returns the text content of the elemtnts and all it children
->innerHTML : returns the plain text or HTML contents in the element. its advantage is tht we can write the html tags(in console)
-> textContent : returns textual content even for hidden elements



DOM tree has three tyoes of nodes
    textnodes
    comments
    elements
DOM always works on element nodes
by default the first node inside body tag is textnode


ATTRIBUTES
= getAttribute(attr)// used to get the attribute value
= setattribute(attr,val)//to set the attribute value

STYLE
= node.style

INSERT elements
steps: 1>create ..suppose button
       2>add 

to create we write
        document.createElement("div");
to show the property on the screen there are four methods
        = node.append(el)//adds at the end of the node(inside)
        =node.prepend(el)//adds at the start of the node(inside)
        = node.before(el)//adds before the node)outside
        =node.after(el)//adds after the node(outisde)

DELETE ELEMENTS 
= node.remove()//removes the node
appendChild();
removeChild();
problem of setAttribute can be solved using classList
        


EVENTS 
The change in  the state of an object is known as an Event 
THey are fired to notify the code of "interesting changes"
that may affect code execution.

Mouse events(clcik,double click etc.)
keyboard events ((key press,keyup,keydown))
form events(submit etc)
print events & many more

Its called event handling in js
writing the events in the html tags is called inline handling

A better approach is writing the events in js files
 node.event=()=>{

 }
 Eg. btn.onclick=()=>{

 }

 an an event is handled in inline method and also in js file,
 the priority is given to the event handling in js file


 EVENT OBJECT 
 It is a special object that has details about the event

 All event handlers have access to the event object's properties and methods.

 node.event=(e)=>{

 }
 e.type, e.target, e.client1, e.client2

 EVENT LISTENERS

 node.addEventListener(event,callback); callback is aka handler
 node.removeEventListerner(event,callback);

 Note: the callback reference should be same to remove



CLASS AND OBJECTS 

    PROTOTYPES IN JS
    A JS object is an entity having state and behaviour(properties and methods)
    JS objects have a special property called prototype.
    We can set prototype using  __proto__
    whenever we create an object in js a prototype object is created hwich has special properties and methods.
    ->Its type is a reference to an onject.
    -> If an object and protoytpe have same method ,objects method will be used.
    Eg.:
         const employee={
            calcTax: ()=>{
                console.log("Tax rate is 10%");
            },
        };

        const karanArjun1={
            salary:50000,
            calcTax: ()=>{
                console.log("Tax rate is 10%");//this will get the priority
            },
        };
    
    CLASSES IN JS
     Class is a program-code temp,ate for creating OBJECTS.
     Those objects will have some state(variables) & some behaviour(functions) inside it.

     class MyClass{
        constructor(){

        }
        myMethods(){

        }
     }

     let myObj=new MyClass();

     CONSTRUCTORS 
     constructor method is automatically invoked by new keyword
     It initialises tht object.

     INHERITANCE IN JS
    
    Inheritance is passing down the properties and methods from parent class to child class

    class parent{

    }
    class child extends Parent{

    }
     
    If child and parent have the same method, child's method will be used.[Method overriding]
    
    super keyword

    the super keyword is used to call the constructor of its parent class to access the parent's properties amd methods

    super(args)//calls parent's constructor
    super.parentMethod(args)



    Error handling

    try-catch Blocks

    try{
        normal code
    }
    catch(){

    }


Callbacks,Promises and Async Await

async await>>promise chains>>callback hell


Sync in JS

Synchronous means the code runs in a particular sequence of instructions given in the program.
Each instruction waits for the previous instruction to complete its execution.

Asynchronous 

Due to Synchronous programming, sometimes important things get blocked due to some previous instructions, which causes a delay in the UI
Asynchronous code execution allows to execute next instructions immediately and doesnt block the flow.
   